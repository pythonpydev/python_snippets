{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Docstring for a Python function": {
	"prefix": "snp_func_docstring",
	"body": [
		"def add_binary(a, b):",
		"    '''",
		"    Return the sum of two decimal numbers in binary digits.",
		"",
		"            Parameters:",
		"                    a (int): A decimal integer",
		"                    b (int): Another decimal integer",
		"",
		"            Returns:",
		"                    binary_sum (str): Binary string of the sum of a and b",
		"    '''",
		"    binary_sum = bin(a+b)[2:]",
		"    return binary_sum",
		"",
		"",
		"print(add_binary.__doc__)"
	],
	"description": "Docstring for a Python function"
	},

	"Header file for Python ": {
	"prefix": "snp_header",
	"body": [
		"#!/usr/bin/.venv python3",
		"",
		"# $TM_FILENAME",
		"",
		"\"\"\"",
		"Description: This script performs data preprocessing tasks for a machine learning project.",
		"Author: Author Name",
		"Date Created: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
		"Date Modified: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
		"Version: 1.0",
		"Python Version: 3.12.0",
		"Dependencies: pandas, scikit-learn",
		"License: MIT License",
		"\"\"\"",
		"",
		"import pandas as pd",
		"from sklearn.preprocessing import StandardScaler",
		"",
		"# Code continues here..."
	],
	"description": "Header file for Python "
	},

	"Python main function": {
		"prefix": "snp_main",
		"body": [
			"import shlex",
			"import sys",
			"",
			"def echo(phrase: str) -> None:",
			"    \"\"\"A dummy wrapper around print.\"\"\"",
			"    # for demonstration purposes, you can imagine that there is some",
			"    # valuable and reusable logic inside this function",
			"    print(phrase)",
			"",
			"def main() -> int:",
			"    \"\"\" Main entry point of the app \"\"\"",
			"    \"\"\"Echo the input arguments to standard output\"\"\"",
			"    phrase = shlex.join(sys.argv)",
			"    echo(phrase)",
			"    return 0",
			"",
			"if __name__ == '__main__':",
			"    \"\"\"App starts executing here\"\"\"",
			"    sys.exit(main())  # next section explains the use of sys.exit",
			"    ",
			"    "
		],
		"description": "Python main function"
		},
	
	"Python class with metaclass": {
	  "prefix": "snp_class_meta",
	  "body": [
		"class Meta(type):",
		"    \"\"\"",
		"    Flexible metaclass for defining useful decorator functions.",
		"    \"\"\"",
		"    def __new__(cls, clsname, bases, clsdict):",
		"        clsobj = super().__new__(cls, clsname, bases, clsdict)",
		"        return clsobj",
		"",
		"",
		"class Base(object, metaclass=Meta):",
		"    \"\"\"",
		"    Base class.",
		"",
		"    Args:",
		"        *args (list): list of arguments",
		"        **kwargs (dict): dict of keyword arguments",
		"",
		"    Attributes:",
		"        self",
		"    \"\"\"",
		"",
		"    def __init__(self, *args, **kwargs):",
		"        allowed_keys = set([])",
		"        self.__dict__.update((k, False) for k in allowed_keys)",
		"        self.__dict__.update((k, v) for k, v in kwargs.items() if k in allowed_keys)",
		"",
		"    def foo(self):",
		"        \"\"\"",
		"        Function.",
		"        \"\"\"",
		"        pass",
		"",
		"",
		"class Derived(Base):",
		"    \"\"\"",
		"    Derived class.",
		"",
		"    Args:",
		"        *args (list): list of arguments",
		"        **kwargs (dict): dict of keyword arguments",
		"",
		"    Attributes:",
		"        self",
		"    \"\"\"",
		"",
		"    def __init__(self, *args, **kwargs):",
		"        allowed_keys = set([])",
		"        self.__dict__.update((k, False) for k in allowed_keys)",
		"        self.__dict__.update((k, v) for k, v in kwargs.items() if k in allowed_keys)"
	  ],
	  "description": "Python class with metaclass"
	},

	"Python class with child class": {
	"prefix": "snp_class_child",
	"body": [
		"class Parent():",
		"    \"\"\"",
		"    The Parent object is ...",
		"",
		"    Args:",
		"        arg (str): The arg is used for...",
		"        *args: The variable arguments are used for...",
		"        **kwargs: The keyword arguments are used for...",
		"",
		"    Attributes:",
		"        arg (str): This is where we store arg,",
		"    \"\"\"",
		"",
		"    def __init__(self, hair_color, temper):",
		"        self.hair_color = hair_color",
		"        self.temper = temper",
		"",
		"    def sleeping_style(self):",
		"        print('big fan of nap')",
		"",
		"",
		"class Child(Parent):",
		"    \"\"\" ",
		"    The Child object is ...",
		"",
		"    Args:",
		"        arg (str): The arg is used for...",
		"        *args: The variable arguments are used for...",
		"        **kwargs: The keyword arguments are used for...",
		"",
		"    Attributes:",
		"        arg (str): This is where we store arg,",
		"    \"\"\"",
		"",
		"    def __init__(self, hair_color, temper):",
		"        # call the base class init function",
		"        super().__init__(hair_color, temper)",
		"",
		"    def sleeping_style(self):",
		"        # extending the base class method",
		"        super().sleeping_style()",
		"        print('tossing and turning')",
		"",
		"\"\"\"",
		"if __name__ == '__main__':",
		"    # create instance of the child class",
		"    enow = Child('black', 'slow in anger')",
		"    enow.sleeping_style()",
		"    print(enow.hair_color)",
		"    print(enow.temper)",
		"\"\"\""
	],
	"description": "Python class with child class"
	},

	"Basic Python class": {
	"prefix": "snp_class_basic",
	"body": [
		"class SampleClass:",
		"    \"\"\"Summary of class here.",
		"",
		"    Longer class information...",
		"    Longer class information...",
		"",
		"    Attributes:",
		"        likes_spam: A boolean indicating if we like SPAM or not.",
		"        eggs: An integer count of the eggs we have laid.",
		"    \"\"\"",
		"",
		"    def __init__(self, likes_spam: bool = False):",
		"        \"\"\"Initializes the instance based on spam preference.",
		"",
		"        Args:",
		"          likes_spam: Defines if instance exhibits this preference.",
		"        \"\"\"",
		"        self.likes_spam = likes_spam",
		"        self.eggs = 0",
		"",
		"    def public_method(self):",
		"        \"\"\"Performs operation blah.\"\"\"",
		""
	],
	"description": "Basic Python class"
	}

}
